From 1d53bfbb1b2166b1111abffeafe6ddf73d5ff83e Mon Sep 17 00:00:00 2001
From: Edmunt Pienkowsky <roed@onet.eu>
Date: Fri, 25 Jan 2019 10:21:55 +0000
Subject: [PATCH 6/7] gbak: honor -FE option along with -SE one

Allow to read pasword from file when using services manager.

Signed-off-by: Edmunt Pienkowsky <roed@onet.eu>

diff --git a/src/burp/burp.cpp b/src/burp/burp.cpp
index 0c02dee258..e217bb71aa 100644
--- a/src/burp/burp.cpp
+++ b/src/burp/burp.cpp
@@ -214,11 +214,12 @@ static int svc_api_gbak(Firebird::UtilSvc* uSvc, const Switches& switches)
 			break;
 		case IN_SW_BURP_USER:			// default user name
 		case IN_SW_BURP_PASS:			// default password
+		case IN_SW_BURP_FETCHPASS:		// default password (from file)
 		case IN_SW_BURP_SE:				// service name
 			if (itr >= argc - 1)
 			{
 				int errnum = inSw->in_sw == IN_SW_BURP_USER ? 188 : // user name parameter missing
-						   		inSw->in_sw == IN_SW_BURP_PASS ? 189 : // password parameter missing
+								(inSw->in_sw == IN_SW_BURP_PASS || inSw->in_sw == IN_SW_BURP_FETCHPASS) ? 189 : // password parameter missing
 									273; // service name parameter missing
 
 				BURP_error(errnum, true);
@@ -235,6 +236,25 @@ static int svc_api_gbak(Firebird::UtilSvc* uSvc, const Switches& switches)
 					pswd = argv[itr];
 					uSvc->hidePasswd(argv, itr);
 					break;
+				case IN_SW_BURP_FETCHPASS:		// default password (from file)
+					switch (fb_utils::fetchPassword(argv[itr], pswd))
+					{
+					case fb_utils::FETCH_PASS_OK:
+						break;
+					case fb_utils::FETCH_PASS_FILE_OPEN_ERROR:
+						BURP_error(308, true, SafeArg() << argv[itr] << errno);
+						// error @2 opening password file @1
+						break;
+					case fb_utils::FETCH_PASS_FILE_READ_ERROR:
+						BURP_error(309, true, SafeArg() << argv[itr] << errno);
+						// error @2 reading password file @1
+						break;
+					case fb_utils::FETCH_PASS_FILE_EMPTY:
+						BURP_error(310, true, SafeArg() << argv[itr]);
+						// password file @1 is empty
+						break;
+					}
+				break;
 				case IN_SW_BURP_SE:				// service name
 					service = argv[itr];
 					break;
@@ -687,15 +707,15 @@ int gbak(Firebird::UtilSvc* uSvc)
 			case fb_utils::FETCH_PASS_OK:
 				break;
 			case fb_utils::FETCH_PASS_FILE_OPEN_ERROR:
-				BURP_error(308, true, MsgFormat::SafeArg() << argv[itr] << errno);
+				BURP_error(308, true, SafeArg() << argv[itr] << errno);
 				// error @2 opening password file @1
 				break;
 			case fb_utils::FETCH_PASS_FILE_READ_ERROR:
-				BURP_error(309, true, MsgFormat::SafeArg() << argv[itr] << errno);
+				BURP_error(309, true, SafeArg() << argv[itr] << errno);
 				// error @2 reading password file @1
 				break;
 			case fb_utils::FETCH_PASS_FILE_EMPTY:
-				BURP_error(310, true, MsgFormat::SafeArg() << argv[itr]);
+				BURP_error(310, true, SafeArg() << argv[itr]);
 				// password file @1 is empty
 				break;
 			}
diff --git a/src/common/utils.cpp b/src/common/utils.cpp
index 0e06968a7b..9424110312 100644
--- a/src/common/utils.cpp
+++ b/src/common/utils.cpp
@@ -795,20 +795,31 @@ namespace {
 	};
 } // namespace
 
-// fetch password from file
-FetchPassResult fetchPassword(const Firebird::PathName& name, const char*& password)
+// fetch password from file #1
+FetchPassResult fetchPassword(const Firebird::PathName& name, Firebird::string& password)
 {
-	InputFile file(name);
-	if (!file)
-	{
-		return FETCH_PASS_FILE_OPEN_ERROR;
-	}
+        InputFile file(name);
+        if (!file)
+        {
+                return FETCH_PASS_FILE_OPEN_ERROR;
+        }
+
+        Firebird::string pwd;
+        if (!pwd.LoadFromFile(file.getStdioFile()))
+        {
+                return ferror(file.getStdioFile()) ? FETCH_PASS_FILE_READ_ERROR : FETCH_PASS_FILE_EMPTY;
+        }
+
+	password = pwd;
+        return FETCH_PASS_OK;
+}
 
+// fetch password from file #2
+FetchPassResult fetchPassword(const Firebird::PathName& name, const char*& password)
+{
 	Firebird::string pwd;
-	if (! pwd.LoadFromFile(file.getStdioFile()))
-	{
-		return ferror(file.getStdioFile()) ? FETCH_PASS_FILE_READ_ERROR : FETCH_PASS_FILE_EMPTY;
-	}
+	FetchPassResult res = fetchPassword(name, pwd);
+	if (res != FETCH_PASS_OK) return res;
 
 	// this is planned leak of a few bytes of memory in utilities
 	char* pass = FB_NEW_POOL(*getDefaultMemoryPool()) char[pwd.length() + 1];
@@ -817,8 +828,6 @@ FetchPassResult fetchPassword(const Firebird::PathName& name, const char*& passw
 	return FETCH_PASS_OK;
 }
 
-
-
 const SINT64 BILLION = 1000000000;
 static SINT64 saved_frequency = 0;
 
diff --git a/src/common/utils_proto.h b/src/common/utils_proto.h
index 13ccc0025a..60c5fd1142 100644
--- a/src/common/utils_proto.h
+++ b/src/common/utils_proto.h
@@ -150,6 +150,8 @@ namespace fb_utils
 		FETCH_PASS_FILE_READ_ERROR,
 		FETCH_PASS_FILE_EMPTY
 	};
+
+	FetchPassResult fetchPassword(const Firebird::PathName& name, Firebird::string& password);
 	FetchPassResult fetchPassword(const Firebird::PathName& name, const char*& password);
 
 	// Returns current value of performance counter
-- 
2.22.0

